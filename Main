if getgenv().executed then
    return
end
getgenv().executed = true
repeat wait() until game:IsLoaded()
local queue_on_teleport = queue_on_teleport or syn.queue_on_teleport or fluxus.queue_on_teleport or function(...)
    return ...
end

game.Players.LocalPlayer.OnTeleport:Connect(function(State)
    if State == Enum.TeleportState.Started or Enum.TeleportState.InProgress then
        
            queue_on_teleport([[
                repeat wait() until game:IsLoaded()
                wait(2)
                if getgenv().executed then 
                    return 
                end
                getgenv().executed = true
                loadstring(game:HttpGet("https://raw.githubusercontent.com/TrilhaX/animeswitch/main/Main"))()
                ]])
    end
end)

warn('[TEMPEST HUB] Loading Bypass')
wait(1)
warn('[TEMPEST HUB] Loading Ui')
wait(1)
local repo = 'https://raw.githubusercontent.com/TrapstarKSSKSKSKKS/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
Library:Notify('Welcome to Tempest Hub', 5)

local Window = Library:CreateWindow({
    Title = 'Tempest Hub | Anime Switch',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

Library:Notify('Loading Anime Switch Script', 5)
warn('[TEMPEST HUB] Loading Function')
wait(1)
warn('[TEMPEST HUB] Loading Toggles')
wait(1)
warn('[TEMPEST HUB] Last Checking')
wait(1)

local TweenService = game:GetService("TweenService")
local speed = 1000

function tweenModel(model, targetCFrame)
    local duration = (model.PrimaryPart.Position - targetCFrame.Position).Magnitude / speed
    local info = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    
    local cframeValue = Instance.new("CFrameValue")
    cframeValue.Value = model:GetPrimaryPartCFrame()
    
    cframeValue:GetPropertyChangedSignal("Value"):Connect(function()
        model:SetPrimaryPartCFrame(cframeValue.Value)
    end)
    
    local tween = TweenService:Create(cframeValue, info, {
        Value = targetCFrame,
    })
    
    tween:Play()
    tween.Completed:Connect(function()
        cframeValue:Destroy()
    end)
end

function GetCFrame(obj, height, angle)
    local cframe = CFrame.new()

    if typeof(obj) == "Vector3" then
        cframe = CFrame.new(obj)
    elseif typeof(obj) == "table" then
        cframe = CFrame.new(unpack(obj))
    elseif typeof(obj) == "string" then
        local parts = {}
        for val in obj:gmatch("[^,]+") do
            table.insert(parts, tonumber(val))
        end
        if #parts >= 3 then
            cframe = CFrame.new(unpack(parts))
        end
    elseif typeof(obj) == "Instance" then
        if obj:IsA("Model") then
            local rootPart = obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChild("Torso")
            if rootPart then
                cframe = rootPart.CFrame
            end
        elseif obj:IsA("Part") then
            cframe = obj.CFrame
        end
    end

    -- Apply height and angle adjustments
    if height then
        cframe = cframe + Vector3.new(0, height, 0)
    end
    if angle then
        cframe = cframe * CFrame.Angles(0, math.rad(angle), 0)
    end
    
    return cframe
end

function killaura()
    while getgenv().killaura == true do
        local args = {
            [1] = "M1",
            [2] = "D",
            [3] = workspace:WaitForChild("Map"):WaitForChild("Ignore"),
            [4] = CFrame.new()
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteObjects"):WaitForChild("KeyInputs"):FireServer(unpack(args))        
        wait()
    end
end

function autoenter()
    while getgenv().autoenter == true do
        local args = {
            [1] = {
                ["Option"] = "Create",
                ["Type"] = "Room",
                ["Stage"] = selectedStage,
                ["Difficulty"] = selectedDifficulty
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteObjects"):WaitForChild("CTS"):FireServer(unpack(args))
        wait(1)
        local args = {
            [1] = {
                ["Option"] = "Start",
                ["Type"] = "Room"
            }
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("RemoteObjects"):WaitForChild("CTS"):FireServer(unpack(args))
        wait(2)
    end
end

function autokill()
    while getgenv().autokill == true do
        local players = game.Players
        local enemies = workspace:FindFirstChild("Alive") -- Presumindo que "Alive" seja uma instÃ¢ncia

        if enemies then
            local enemyNames = {}

            -- Obter os nomes dos inimigos
            for _, enemyChild in ipairs(enemies:GetChildren()) do
                enemyNames[enemyChild.Name] = true
            end

            -- Excluir nomes de jogadores da lista de inimigos
            for _, player in ipairs(players:GetPlayers()) do
                enemyNames[player.Name] = nil
            end

            -- Imprimir apenas os nomes dos inimigos
            for enemyName, _ in pairs(enemyNames) do
                local enemy = enemies:FindFirstChild(enemyName)
                if enemy and enemy:IsA("Model") then
                    local humanoidRootPart = enemy:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        local targetCFrame = GetCFrame(humanoidRootPart) -- Presumindo que GetCFrame esteja definido
                        if targetCFrame then
                            tweenModel(game.Players.LocalPlayer.Character, targetCFrame) -- Presumindo que tweenModel esteja definido
                            wait()
                        end
                    end
                end
            end
        end
        wait() -- Aguardar um segundo antes de verificar novamente
    end
end




local ValuesFases = {}

local saga = game:GetService("Players").LocalPlayer.Data:FindFirstChild("Sagas")
if saga then
    local fases = game:GetService("Players").LocalPlayer.Data.Sagas["Cut Island"]
    if fases then
        local children = fases:GetChildren()

        for _, fasesgame in ipairs(children) do
            table.insert(ValuesFases, fasesgame.Name)
        end
    else
        print("Fases Nao tem")
    end
else
    print("Sags Nao tem")
end

local ValuesDifficulty = {"Normal", "Nightmare"}

local Tabs = {
    Main = Window:AddTab('Main'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Player')

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Lobby')

LeftGroupBox:AddDropdown('Fases', {
    Values = ValuesFases,
    Default = "None",
    Multi = false,
    Text = 'Choose Stage',
    Callback = function(value)
        selectedStage = value
    end
})


LeftGroupBox:AddDropdown('Difficulty', {
    Values = ValuesDifficulty,
    Default = "None",
    Multi = false,
    Text = 'Choose Difficulty',
    Callback = function(value)
        selectedDifficulty = value
    end
})

LeftGroupBox:AddToggle('AutoEnter', {
    Text = 'Auto Enter',
    Default = false,
    Callback = function(Value)
        getgenv().autoenter = Value
        if Value then
            autoenter() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

LeftGroupBox:AddLabel("Use this in the world u want do")

local RightGroupBox = Tabs.Main:AddRightGroupbox('InGame')

RightGroupBox:AddToggle('KillAura', {
    Text = 'Kill Aura',
    Default = false,
    Callback = function(Value)
        getgenv().killaura = Value
        if Value then
            killaura() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})

RightGroupBox:AddToggle('AutoKill', {
    Text = 'Auto Kill',
    Default = false,
    Callback = function(Value)
        getgenv().autokill = Value
        if Value then
            autokill() -- Iniciar o autofarm apenas se estiver ativado
        end
    end
})


local FrameTimer = tick()
local FrameCounter = 0
local FPS = 60

local WatermarkConnection

-- Create a function to update FPS and ping information
local function UpdateWatermark()
    FrameCounter = FrameCounter + 1

    if (tick() - FrameTimer) >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end

    Library:SetWatermark(('Tempest Hub | %s fps | %s ms'):format(
        math.floor(FPS),
        math.floor(game:GetService('Stats').Network.ServerStatsItem['Data Ping']:GetValue())
    ))
end

-- Connect the function to the RenderStepped event
WatermarkConnection = game:GetService('RunService').RenderStepped:Connect(UpdateWatermark)

-- Create tabs for UI settings
local TabsUI = {
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Unload function
local function Unload()
    WatermarkConnection:Disconnect()
    print('Unloaded!')
    Library.Unloaded = true
end

-- UI Settings
local MenuGroup = TabsUI['UI Settings']:AddLeftGroupbox('Menu')

-- Add an unload button
MenuGroup:AddButton('Unload', Unload)

-- Add a label and key picker for the menu keybind
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' })

-- Define the ToggleKeybind variable
Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

ThemeManager:SetFolder('Tempest Hub')
SaveManager:SetFolder('Tempest Hub/_anime_switch_')

SaveManager:BuildConfigSection(TabsUI['UI Settings'])

ThemeManager:ApplyToTab(TabsUI['UI Settings'])

SaveManager:LoadAutoloadConfig()

local GameConfigName = '_anime_switch_'
local player = game.Players.LocalPlayer
SaveManager:Load(player.Name .. GameConfigName)
spawn(function()
    while task.wait(1) do
        if Library.Unloaded then
            break
        end
        SaveManager:Save(player.Name .. GameConfigName)
    end
end)

-- Disable player idling
for i,v in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
    v:Disable()
end
warn('[TEMPEST HUB] Loaded')
